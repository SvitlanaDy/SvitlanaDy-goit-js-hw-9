{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAE9BC,EAAaF,SAASG,kBAAkB,SACxCC,EAAYJ,SAASG,kBAAkB,QACvCE,EAAcL,SAASG,kBAAkB,UA0C/C,SAASG,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAS,SAACC,EAASC,GAC5BC,YAAY,WACNN,EACFI,EAAS,CAAEN,WAAUC,UAGrBM,EAAQ,CAAEP,WAAUC,S,GAErBA,E,IAnDSR,SAASC,cAAc,UAE/Be,iBAAiB,SAEzB,SAAsBC,GACpBA,EAAIC,iBACWb,EAAY,GAAGc,MACZf,EAAU,GAAGe,MACZjB,EAAW,GAAGiB,MAK/B,IAPF,IAGIC,EAAQ,EAIDC,EAAW,EAAGA,GAAYC,OAAOjB,EAAYc,OAAQE,IAC5DD,EAAQE,OAAOpB,EAAWiB,OAASG,OAAOlB,EAAUe,QAAUE,EAAW,GAE3Ef,EAAce,EAAUD,GACzBG,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUC,EAAKgB,EAALhB,MACjBiB,EAAA5B,GAAS6B,OAAOC,QAAQ,qBAAoCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAEnEqB,OAAM,SAAAL,G,IAAGjB,EAAQiB,EAARjB,SAAUC,EAAKgB,EAALhB,MACnBiB,EAAA5B,GAAS6B,OAAOI,QAAQ,oBAAmCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAGlET,EAAKgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["// all modules\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nconst delayInput = document.getElementsByName('delay');\nconst stepInput = document.getElementsByName('step');\nconst amountInput = document.getElementsByName('amount');\nconst formBtn = document.querySelector('button');\n\nformBtn.addEventListener('click', onFormSubmit);\n\nfunction onFormSubmit(evt){\n  evt.preventDefault();\n  const amount = amountInput[0].value;\n  const delayStep = stepInput[0].value;\n  const delayFirst = delayInput[0].value;\n  let delay = 0;\n  // for (let i = 1; i <= amount; i += 1){\n  //   let position = i;\n   \n    for (let position = 1; position <= Number(amountInput.value); position++) {\n      delay = Number(delayInput.value) + Number(stepInput.value) * (position - 1);\n\n    createPromise(position, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n   Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  });\n  }\n  form.reset();\n}\n\n// formBtn.addEventListener('click', (evt) => {\n//   evt.preventDefault();\n//   let delay = 0;\n//   for (let position = 1; position <= amountInput; position++) {\n//   delay = delayFirst + delayStep*(position-1);\n//   createPromise (position, delay).then(({ position, delay }) => {\n//     Notify.success(`:white_check_mark: Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notify.failure(`:x: Rejected promise ${position} in ${delay}ms`);\n//   });\n// };\n// })\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise ((resolve, reject) => {\n    setTimeout (() => {\n      if (shouldResolve){\n        resolve ({ position, delay});\n      }\n      else {\n        reject ({ position, delay});\n      }\n    }, delay);\n  });\n  \n}\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","getElementsByName","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","value","delay1","position1","Number","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.b029ff07.js.map"}